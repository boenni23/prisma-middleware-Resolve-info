/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Item: ItemObject
      SecondItem: SecondItemObject
      ItemConnection: ItemConnectionObject
      PageInfo: PageInfoObject
      ItemEdge: ItemEdgeObject
      AggregateItem: AggregateItemObject
      SecondItemConnection: SecondItemConnectionObject
      SecondItemEdge: SecondItemEdgeObject
      AggregateSecondItem: AggregateSecondItemObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      ItemSubscriptionPayload: ItemSubscriptionPayloadObject
      ItemPreviousValues: ItemPreviousValuesObject
      SecondItemSubscriptionPayload: SecondItemSubscriptionPayloadObject
      SecondItemPreviousValues: SecondItemPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Item: ItemFieldDetails
      SecondItem: SecondItemFieldDetails
      ItemConnection: ItemConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      ItemEdge: ItemEdgeFieldDetails
      AggregateItem: AggregateItemFieldDetails
      SecondItemConnection: SecondItemConnectionFieldDetails
      SecondItemEdge: SecondItemEdgeFieldDetails
      AggregateSecondItem: AggregateSecondItemFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      ItemSubscriptionPayload: ItemSubscriptionPayloadFieldDetails
      ItemPreviousValues: ItemPreviousValuesFieldDetails
      SecondItemSubscriptionPayload: SecondItemSubscriptionPayloadFieldDetails
      SecondItemPreviousValues: SecondItemPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      ItemWhereUniqueInput: ItemWhereUniqueInputInputObject
      SecondItemWhereInput: SecondItemWhereInputInputObject
      ItemWhereInput: ItemWhereInputInputObject
      SecondItemWhereUniqueInput: SecondItemWhereUniqueInputInputObject
      ItemCreateInput: ItemCreateInputInputObject
      SecondItemCreateManyInput: SecondItemCreateManyInputInputObject
      SecondItemCreateInput: SecondItemCreateInputInputObject
      ItemUpdateInput: ItemUpdateInputInputObject
      SecondItemUpdateManyInput: SecondItemUpdateManyInputInputObject
      SecondItemUpdateWithWhereUniqueNestedInput: SecondItemUpdateWithWhereUniqueNestedInputInputObject
      SecondItemUpdateDataInput: SecondItemUpdateDataInputInputObject
      SecondItemUpsertWithWhereUniqueNestedInput: SecondItemUpsertWithWhereUniqueNestedInputInputObject
      SecondItemScalarWhereInput: SecondItemScalarWhereInputInputObject
      SecondItemUpdateManyWithWhereNestedInput: SecondItemUpdateManyWithWhereNestedInputInputObject
      SecondItemUpdateManyDataInput: SecondItemUpdateManyDataInputInputObject
      ItemUpdateManyMutationInput: ItemUpdateManyMutationInputInputObject
      SecondItemUpdateInput: SecondItemUpdateInputInputObject
      SecondItemUpdateManyMutationInput: SecondItemUpdateManyMutationInputInputObject
      ItemSubscriptionWhereInput: ItemSubscriptionWhereInputInputObject
      SecondItemSubscriptionWhereInput: SecondItemSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    SecondItemOrderByInput: SecondItemOrderByInputValues,
    ItemOrderByInput: ItemOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'item', args?: QueryItemArgs[] | false, alias?: string  } 
  | { name: 'items', args?: QueryItemsArgs[] | false, alias?: string  } 
  | { name: 'itemsConnection', args?: QueryItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'secondItem', args?: QuerySecondItemArgs[] | false, alias?: string  } 
  | { name: 'secondItems', args?: QuerySecondItemsArgs[] | false, alias?: string  } 
  | { name: 'secondItemsConnection', args?: QuerySecondItemsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'item'
  | 'items'
  | 'itemsConnection'
  | 'secondItem'
  | 'secondItems'
  | 'secondItemsConnection'


type QueryItemArgs =
  | 'where'
type QueryItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySecondItemArgs =
  | 'where'
type QuerySecondItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySecondItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  item: {
    type: 'Item'
    args: Record<QueryItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  items: {
    type: 'Item'
    args: Record<QueryItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item[]> | prisma.Item[]
  }
  itemsConnection: {
    type: 'ItemConnection'
    args: Record<QueryItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemConnection> | prisma.ItemConnection
  }
  secondItem: {
    type: 'SecondItem'
    args: Record<QuerySecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SecondItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem | null> | prisma.SecondItem | null
  }
  secondItems: {
    type: 'SecondItem'
    args: Record<QuerySecondItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SecondItemWhereInput | null, orderBy?: prisma.SecondItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem[]> | prisma.SecondItem[]
  }
  secondItemsConnection: {
    type: 'SecondItemConnection'
    args: Record<QuerySecondItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SecondItemWhereInput | null, orderBy?: prisma.SecondItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItemConnection> | prisma.SecondItemConnection
  }
}
  

// Types for Item

type ItemObject =
  | ItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'field', args?: [] | false, alias?: string  } 
  | { name: 'secondItems', args?: ItemSecondItemsArgs[] | false, alias?: string  } 

type ItemFields =
  | 'id'
  | 'field'
  | 'secondItems'


type ItemSecondItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  field: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  secondItems: {
    type: 'SecondItem'
    args: Record<ItemSecondItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Item">,
      args: { where?: SecondItemWhereInput | null, orderBy?: prisma.SecondItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem[]> | prisma.SecondItem[]
  }
}
  

// Types for SecondItem

type SecondItemObject =
  | SecondItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'secondField', args?: [] | false, alias?: string  } 

type SecondItemFields =
  | 'id'
  | 'secondField'



  

export interface SecondItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  secondField: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ItemConnection

type ItemConnectionObject =
  | ItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemEdge[]> | prisma.ItemEdge[]
  }
  aggregate: {
    type: 'AggregateItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateItem> | prisma.AggregateItem
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ItemEdge

type ItemEdgeObject =
  | ItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ItemEdgeFieldDetails {
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateItem

type AggregateItemObject =
  | AggregateItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateItemFields =
  | 'count'



  

export interface AggregateItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SecondItemConnection

type SecondItemConnectionObject =
  | SecondItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SecondItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SecondItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SecondItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SecondItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SecondItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItemEdge[]> | prisma.SecondItemEdge[]
  }
  aggregate: {
    type: 'AggregateSecondItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SecondItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSecondItem> | prisma.AggregateSecondItem
  }
}
  

// Types for SecondItemEdge

type SecondItemEdgeObject =
  | SecondItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SecondItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SecondItemEdgeFieldDetails {
  node: {
    type: 'SecondItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SecondItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem> | prisma.SecondItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSecondItem

type AggregateSecondItemObject =
  | AggregateSecondItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSecondItemFields =
  | 'count'



  

export interface AggregateSecondItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createItem', args?: MutationCreateItemArgs[] | false, alias?: string  } 
  | { name: 'updateItem', args?: MutationUpdateItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyItems', args?: MutationUpdateManyItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertItem', args?: MutationUpsertItemArgs[] | false, alias?: string  } 
  | { name: 'deleteItem', args?: MutationDeleteItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyItems', args?: MutationDeleteManyItemsArgs[] | false, alias?: string  } 
  | { name: 'createSecondItem', args?: MutationCreateSecondItemArgs[] | false, alias?: string  } 
  | { name: 'updateSecondItem', args?: MutationUpdateSecondItemArgs[] | false, alias?: string  } 
  | { name: 'updateManySecondItems', args?: MutationUpdateManySecondItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertSecondItem', args?: MutationUpsertSecondItemArgs[] | false, alias?: string  } 
  | { name: 'deleteSecondItem', args?: MutationDeleteSecondItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManySecondItems', args?: MutationDeleteManySecondItemsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createItem'
  | 'updateItem'
  | 'updateManyItems'
  | 'upsertItem'
  | 'deleteItem'
  | 'deleteManyItems'
  | 'createSecondItem'
  | 'updateSecondItem'
  | 'updateManySecondItems'
  | 'upsertSecondItem'
  | 'deleteSecondItem'
  | 'deleteManySecondItems'


type MutationCreateItemArgs =
  | 'data'
type MutationUpdateItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteItemArgs =
  | 'where'
type MutationDeleteManyItemsArgs =
  | 'where'
type MutationCreateSecondItemArgs =
  | 'data'
type MutationUpdateSecondItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManySecondItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertSecondItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSecondItemArgs =
  | 'where'
type MutationDeleteManySecondItemsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createItem: {
    type: 'Item'
    args: Record<MutationCreateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  updateItem: {
    type: 'Item'
    args: Record<MutationUpdateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateInput, where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updateManyItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateManyMutationInput, where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertItem: {
    type: 'Item'
    args: Record<MutationUpsertItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput, create: ItemCreateInput, update: ItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  deleteItem: {
    type: 'Item'
    args: Record<MutationDeleteItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  deleteManyItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSecondItem: {
    type: 'SecondItem'
    args: Record<MutationCreateSecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SecondItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem> | prisma.SecondItem
  }
  updateSecondItem: {
    type: 'SecondItem'
    args: Record<MutationUpdateSecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SecondItemUpdateInput, where: SecondItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem | null> | prisma.SecondItem | null
  }
  updateManySecondItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySecondItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SecondItemUpdateManyMutationInput, where?: SecondItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSecondItem: {
    type: 'SecondItem'
    args: Record<MutationUpsertSecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SecondItemWhereUniqueInput, create: SecondItemCreateInput, update: SecondItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem> | prisma.SecondItem
  }
  deleteSecondItem: {
    type: 'SecondItem'
    args: Record<MutationDeleteSecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SecondItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem | null> | prisma.SecondItem | null
  }
  deleteManySecondItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySecondItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SecondItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'item', args?: SubscriptionItemArgs[] | false, alias?: string  } 
  | { name: 'secondItem', args?: SubscriptionSecondItemArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'item'
  | 'secondItem'


type SubscriptionItemArgs =
  | 'where'
type SubscriptionSecondItemArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  item: {
    type: 'ItemSubscriptionPayload'
    args: Record<SubscriptionItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemSubscriptionPayload | null> | prisma.ItemSubscriptionPayload | null
  }
  secondItem: {
    type: 'SecondItemSubscriptionPayload'
    args: Record<SubscriptionSecondItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SecondItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItemSubscriptionPayload | null> | prisma.SecondItemSubscriptionPayload | null
  }
}
  

// Types for ItemSubscriptionPayload

type ItemSubscriptionPayloadObject =
  | ItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemPreviousValues | null> | prisma.ItemPreviousValues | null
  }
}
  

// Types for ItemPreviousValues

type ItemPreviousValuesObject =
  | ItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'field', args?: [] | false, alias?: string  } 

type ItemPreviousValuesFields =
  | 'id'
  | 'field'



  

export interface ItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  field: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SecondItemSubscriptionPayload

type SecondItemSubscriptionPayloadObject =
  | SecondItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SecondItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SecondItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SecondItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SecondItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SecondItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItem | null> | prisma.SecondItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SecondItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SecondItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SecondItemPreviousValues | null> | prisma.SecondItemPreviousValues | null
  }
}
  

// Types for SecondItemPreviousValues

type SecondItemPreviousValuesObject =
  | SecondItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'secondField', args?: [] | false, alias?: string  } 

type SecondItemPreviousValuesFields =
  | 'id'
  | 'secondField'



  

export interface SecondItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  secondField: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface ItemWhereUniqueInput {
  id?: string | null
}
export type ItemWhereUniqueInputInputObject =
  | Extract<keyof ItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SecondItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  secondField?: string | null
  secondField_not?: string | null
  secondField_in?: string[]
  secondField_not_in?: string[]
  secondField_lt?: string | null
  secondField_lte?: string | null
  secondField_gt?: string | null
  secondField_gte?: string | null
  secondField_contains?: string | null
  secondField_not_contains?: string | null
  secondField_starts_with?: string | null
  secondField_not_starts_with?: string | null
  secondField_ends_with?: string | null
  secondField_not_ends_with?: string | null
  AND?: SecondItemWhereInput[]
}
export type SecondItemWhereInputInputObject =
  | Extract<keyof SecondItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'secondField', alias?: string  } 
  | { name: 'secondField_not', alias?: string  } 
  | { name: 'secondField_in', alias?: string  } 
  | { name: 'secondField_not_in', alias?: string  } 
  | { name: 'secondField_lt', alias?: string  } 
  | { name: 'secondField_lte', alias?: string  } 
  | { name: 'secondField_gt', alias?: string  } 
  | { name: 'secondField_gte', alias?: string  } 
  | { name: 'secondField_contains', alias?: string  } 
  | { name: 'secondField_not_contains', alias?: string  } 
  | { name: 'secondField_starts_with', alias?: string  } 
  | { name: 'secondField_not_starts_with', alias?: string  } 
  | { name: 'secondField_ends_with', alias?: string  } 
  | { name: 'secondField_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  field?: string | null
  field_not?: string | null
  field_in?: string[]
  field_not_in?: string[]
  field_lt?: string | null
  field_lte?: string | null
  field_gt?: string | null
  field_gte?: string | null
  field_contains?: string | null
  field_not_contains?: string | null
  field_starts_with?: string | null
  field_not_starts_with?: string | null
  field_ends_with?: string | null
  field_not_ends_with?: string | null
  secondItems_some?: SecondItemWhereInput | null
  AND?: ItemWhereInput[]
}
export type ItemWhereInputInputObject =
  | Extract<keyof ItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'field', alias?: string  } 
  | { name: 'field_not', alias?: string  } 
  | { name: 'field_in', alias?: string  } 
  | { name: 'field_not_in', alias?: string  } 
  | { name: 'field_lt', alias?: string  } 
  | { name: 'field_lte', alias?: string  } 
  | { name: 'field_gt', alias?: string  } 
  | { name: 'field_gte', alias?: string  } 
  | { name: 'field_contains', alias?: string  } 
  | { name: 'field_not_contains', alias?: string  } 
  | { name: 'field_starts_with', alias?: string  } 
  | { name: 'field_not_starts_with', alias?: string  } 
  | { name: 'field_ends_with', alias?: string  } 
  | { name: 'field_not_ends_with', alias?: string  } 
  | { name: 'secondItems_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SecondItemWhereUniqueInput {
  id?: string | null
}
export type SecondItemWhereUniqueInputInputObject =
  | Extract<keyof SecondItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ItemCreateInput {
  id?: string | null
  field?: string
  secondItems?: SecondItemCreateManyInput | null
}
export type ItemCreateInputInputObject =
  | Extract<keyof ItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'field', alias?: string  } 
  | { name: 'secondItems', alias?: string  } 
  
export interface SecondItemCreateManyInput {
  create?: SecondItemCreateInput[]
  connect?: SecondItemWhereUniqueInput[]
}
export type SecondItemCreateManyInputInputObject =
  | Extract<keyof SecondItemCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SecondItemCreateInput {
  id?: string | null
  secondField?: string | null
}
export type SecondItemCreateInputInputObject =
  | Extract<keyof SecondItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'secondField', alias?: string  } 
  
export interface ItemUpdateInput {
  field?: string | null
  secondItems?: SecondItemUpdateManyInput | null
}
export type ItemUpdateInputInputObject =
  | Extract<keyof ItemUpdateInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'secondItems', alias?: string  } 
  
export interface SecondItemUpdateManyInput {
  create?: SecondItemCreateInput[]
  update?: SecondItemUpdateWithWhereUniqueNestedInput[]
  upsert?: SecondItemUpsertWithWhereUniqueNestedInput[]
  delete?: SecondItemWhereUniqueInput[]
  connect?: SecondItemWhereUniqueInput[]
  set?: SecondItemWhereUniqueInput[]
  disconnect?: SecondItemWhereUniqueInput[]
  deleteMany?: SecondItemScalarWhereInput[]
  updateMany?: SecondItemUpdateManyWithWhereNestedInput[]
}
export type SecondItemUpdateManyInputInputObject =
  | Extract<keyof SecondItemUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SecondItemUpdateWithWhereUniqueNestedInput {
  where?: SecondItemWhereUniqueInput
  data?: SecondItemUpdateDataInput
}
export type SecondItemUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof SecondItemUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SecondItemUpdateDataInput {
  secondField?: string | null
}
export type SecondItemUpdateDataInputInputObject =
  | Extract<keyof SecondItemUpdateDataInput, string>
  | { name: 'secondField', alias?: string  } 
  
export interface SecondItemUpsertWithWhereUniqueNestedInput {
  where?: SecondItemWhereUniqueInput
  update?: SecondItemUpdateDataInput
  create?: SecondItemCreateInput
}
export type SecondItemUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof SecondItemUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SecondItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  secondField?: string | null
  secondField_not?: string | null
  secondField_in?: string[]
  secondField_not_in?: string[]
  secondField_lt?: string | null
  secondField_lte?: string | null
  secondField_gt?: string | null
  secondField_gte?: string | null
  secondField_contains?: string | null
  secondField_not_contains?: string | null
  secondField_starts_with?: string | null
  secondField_not_starts_with?: string | null
  secondField_ends_with?: string | null
  secondField_not_ends_with?: string | null
  AND?: SecondItemScalarWhereInput[]
  OR?: SecondItemScalarWhereInput[]
  NOT?: SecondItemScalarWhereInput[]
}
export type SecondItemScalarWhereInputInputObject =
  | Extract<keyof SecondItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'secondField', alias?: string  } 
  | { name: 'secondField_not', alias?: string  } 
  | { name: 'secondField_in', alias?: string  } 
  | { name: 'secondField_not_in', alias?: string  } 
  | { name: 'secondField_lt', alias?: string  } 
  | { name: 'secondField_lte', alias?: string  } 
  | { name: 'secondField_gt', alias?: string  } 
  | { name: 'secondField_gte', alias?: string  } 
  | { name: 'secondField_contains', alias?: string  } 
  | { name: 'secondField_not_contains', alias?: string  } 
  | { name: 'secondField_starts_with', alias?: string  } 
  | { name: 'secondField_not_starts_with', alias?: string  } 
  | { name: 'secondField_ends_with', alias?: string  } 
  | { name: 'secondField_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SecondItemUpdateManyWithWhereNestedInput {
  where?: SecondItemScalarWhereInput
  data?: SecondItemUpdateManyDataInput
}
export type SecondItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SecondItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SecondItemUpdateManyDataInput {
  secondField?: string | null
}
export type SecondItemUpdateManyDataInputInputObject =
  | Extract<keyof SecondItemUpdateManyDataInput, string>
  | { name: 'secondField', alias?: string  } 
  
export interface ItemUpdateManyMutationInput {
  field?: string | null
}
export type ItemUpdateManyMutationInputInputObject =
  | Extract<keyof ItemUpdateManyMutationInput, string>
  | { name: 'field', alias?: string  } 
  
export interface SecondItemUpdateInput {
  secondField?: string | null
}
export type SecondItemUpdateInputInputObject =
  | Extract<keyof SecondItemUpdateInput, string>
  | { name: 'secondField', alias?: string  } 
  
export interface SecondItemUpdateManyMutationInput {
  secondField?: string | null
}
export type SecondItemUpdateManyMutationInputInputObject =
  | Extract<keyof SecondItemUpdateManyMutationInput, string>
  | { name: 'secondField', alias?: string  } 
  
export interface ItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ItemWhereInput | null
  AND?: ItemSubscriptionWhereInput[]
}
export type ItemSubscriptionWhereInputInputObject =
  | Extract<keyof ItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface SecondItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SecondItemWhereInput | null
  AND?: SecondItemSubscriptionWhereInput[]
}
export type SecondItemSubscriptionWhereInputInputObject =
  | Extract<keyof SecondItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type SecondItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'secondField_ASC'
  | 'secondField_DESC'
  
export type ItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'field_ASC'
  | 'field_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  