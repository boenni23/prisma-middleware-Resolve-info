// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  item: (where?: ItemWhereInput) => Promise<boolean>;
  secondItem: (where?: SecondItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  secondItems: (args?: {
    where?: SecondItemWhereInput;
    orderBy?: SecondItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SecondItem>;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  secondItem: (where: SecondItemWhereUniqueInput) => SecondItemNullablePromise;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  secondItemsConnection: (args?: {
    where?: SecondItemWhereInput;
    orderBy?: SecondItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SecondItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createItem: (data: ItemCreateInput) => ItemPromise;
  createSecondItem: (data: SecondItemCreateInput) => SecondItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateSecondItem: (args: {
    data: SecondItemUpdateInput;
    where: SecondItemWhereUniqueInput;
  }) => SecondItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteSecondItem: (where: SecondItemWhereUniqueInput) => SecondItemPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  upsertSecondItem: (args: {
    where: SecondItemWhereUniqueInput;
    create: SecondItemCreateInput;
    update: SecondItemUpdateInput;
  }) => SecondItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  updateManySecondItems: (args: {
    data: SecondItemUpdateManyMutationInput;
    where?: SecondItemWhereInput;
  }) => BatchPayloadPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  deleteManySecondItems: (where?: SecondItemWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  secondItem: (
    where?: SecondItemSubscriptionWhereInput
  ) => SecondItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "field_ASC"
  | "field_DESC";

export type SecondItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "secondField_ASC"
  | "secondField_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ItemWhereInput {
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  field?: Maybe<String>;
  field_not?: Maybe<String>;
  field_in?: Maybe<String[] | String>;
  field_not_in?: Maybe<String[] | String>;
  field_lt?: Maybe<String>;
  field_lte?: Maybe<String>;
  field_gt?: Maybe<String>;
  field_gte?: Maybe<String>;
  field_contains?: Maybe<String>;
  field_not_contains?: Maybe<String>;
  field_starts_with?: Maybe<String>;
  field_not_starts_with?: Maybe<String>;
  field_ends_with?: Maybe<String>;
  field_not_ends_with?: Maybe<String>;
  secondItems_some?: Maybe<SecondItemWhereInput>;
}

export interface SecondItemWhereInput {
  AND?: Maybe<SecondItemWhereInput[] | SecondItemWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  secondField?: Maybe<String>;
  secondField_not?: Maybe<String>;
  secondField_in?: Maybe<String[] | String>;
  secondField_not_in?: Maybe<String[] | String>;
  secondField_lt?: Maybe<String>;
  secondField_lte?: Maybe<String>;
  secondField_gt?: Maybe<String>;
  secondField_gte?: Maybe<String>;
  secondField_contains?: Maybe<String>;
  secondField_not_contains?: Maybe<String>;
  secondField_starts_with?: Maybe<String>;
  secondField_not_starts_with?: Maybe<String>;
  secondField_ends_with?: Maybe<String>;
  secondField_not_ends_with?: Maybe<String>;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SecondItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  field: String;
  secondItems?: Maybe<SecondItemCreateManyInput>;
}

export interface SecondItemCreateManyInput {
  create?: Maybe<SecondItemCreateInput[] | SecondItemCreateInput>;
  connect?: Maybe<SecondItemWhereUniqueInput[] | SecondItemWhereUniqueInput>;
}

export interface SecondItemCreateInput {
  id?: Maybe<ID_Input>;
  secondField?: Maybe<String>;
}

export interface ItemUpdateInput {
  field?: Maybe<String>;
  secondItems?: Maybe<SecondItemUpdateManyInput>;
}

export interface SecondItemUpdateManyInput {
  create?: Maybe<SecondItemCreateInput[] | SecondItemCreateInput>;
  connect?: Maybe<SecondItemWhereUniqueInput[] | SecondItemWhereUniqueInput>;
  set?: Maybe<SecondItemWhereUniqueInput[] | SecondItemWhereUniqueInput>;
  disconnect?: Maybe<SecondItemWhereUniqueInput[] | SecondItemWhereUniqueInput>;
  delete?: Maybe<SecondItemWhereUniqueInput[] | SecondItemWhereUniqueInput>;
  update?: Maybe<
    | SecondItemUpdateWithWhereUniqueNestedInput[]
    | SecondItemUpdateWithWhereUniqueNestedInput
  >;
  updateMany?: Maybe<
    | SecondItemUpdateManyWithWhereNestedInput[]
    | SecondItemUpdateManyWithWhereNestedInput
  >;
  deleteMany?: Maybe<SecondItemScalarWhereInput[] | SecondItemScalarWhereInput>;
  upsert?: Maybe<
    | SecondItemUpsertWithWhereUniqueNestedInput[]
    | SecondItemUpsertWithWhereUniqueNestedInput
  >;
}

export interface SecondItemUpdateWithWhereUniqueNestedInput {
  where: SecondItemWhereUniqueInput;
  data: SecondItemUpdateDataInput;
}

export interface SecondItemUpdateDataInput {
  secondField?: Maybe<String>;
}

export interface SecondItemUpdateManyWithWhereNestedInput {
  where: SecondItemScalarWhereInput;
  data: SecondItemUpdateManyDataInput;
}

export interface SecondItemScalarWhereInput {
  AND?: Maybe<SecondItemScalarWhereInput[] | SecondItemScalarWhereInput>;
  OR?: Maybe<SecondItemScalarWhereInput[] | SecondItemScalarWhereInput>;
  NOT?: Maybe<SecondItemScalarWhereInput[] | SecondItemScalarWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  secondField?: Maybe<String>;
  secondField_not?: Maybe<String>;
  secondField_in?: Maybe<String[] | String>;
  secondField_not_in?: Maybe<String[] | String>;
  secondField_lt?: Maybe<String>;
  secondField_lte?: Maybe<String>;
  secondField_gt?: Maybe<String>;
  secondField_gte?: Maybe<String>;
  secondField_contains?: Maybe<String>;
  secondField_not_contains?: Maybe<String>;
  secondField_starts_with?: Maybe<String>;
  secondField_not_starts_with?: Maybe<String>;
  secondField_ends_with?: Maybe<String>;
  secondField_not_ends_with?: Maybe<String>;
}

export interface SecondItemUpdateManyDataInput {
  secondField?: Maybe<String>;
}

export interface SecondItemUpsertWithWhereUniqueNestedInput {
  where: SecondItemWhereUniqueInput;
  update: SecondItemUpdateDataInput;
  create: SecondItemCreateInput;
}

export interface SecondItemUpdateInput {
  secondField?: Maybe<String>;
}

export interface ItemUpdateManyMutationInput {
  field?: Maybe<String>;
}

export interface SecondItemUpdateManyMutationInput {
  secondField?: Maybe<String>;
}

export interface ItemSubscriptionWhereInput {
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
}

export interface SecondItemSubscriptionWhereInput {
  AND?: Maybe<
    SecondItemSubscriptionWhereInput[] | SecondItemSubscriptionWhereInput
  >;
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SecondItemWhereInput>;
}

/*
 * An object with an ID

 */
export interface NodeNode {
  id: ID_Output;
}

export interface Item extends Node {
  id: ID_Output;
  field: String;
}

export interface ItemPromise extends Promise<Item>, Fragmentable, Node {
  id: () => Promise<ID_Output>;
  field: () => Promise<String>;
  secondItems: <T = FragmentableArray<SecondItem>>(args?: {
    where?: SecondItemWhereInput;
    orderBy?: SecondItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable,
    Node {
  id: () => Promise<AsyncIterator<ID_Output>>;
  field: () => Promise<AsyncIterator<String>>;
  secondItems: <T = Promise<AsyncIterator<SecondItemSubscription>>>(args?: {
    where?: SecondItemWhereInput;
    orderBy?: SecondItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable,
    Node {
  id: () => Promise<ID_Output>;
  field: () => Promise<String>;
  secondItems: <T = FragmentableArray<SecondItem>>(args?: {
    where?: SecondItemWhereInput;
    orderBy?: SecondItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SecondItem extends Node {
  id: ID_Output;
  secondField?: String;
}

export interface SecondItemPromise
  extends Promise<SecondItem>,
    Fragmentable,
    Node {
  id: () => Promise<ID_Output>;
  secondField: () => Promise<String>;
}

export interface SecondItemSubscription
  extends Promise<AsyncIterator<SecondItem>>,
    Fragmentable,
    Node {
  id: () => Promise<AsyncIterator<ID_Output>>;
  secondField: () => Promise<AsyncIterator<String>>;
}

export interface SecondItemNullablePromise
  extends Promise<SecondItem | null>,
    Fragmentable,
    Node {
  id: () => Promise<ID_Output>;
  secondField: () => Promise<String>;
}

/*
 * A connection to a list of items.

 */
export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

/*
 * A connection to a list of items.

 */
export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

/*
 * A connection to a list of items.

 */
export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
 * An edge in a connection.

 */
export interface ItemEdge {
  node: Item;
  cursor: String;
}

/*
 * An edge in a connection.

 */
export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

/*
 * An edge in a connection.

 */
export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
 * A connection to a list of items.

 */
export interface SecondItemConnection {
  pageInfo: PageInfo;
  edges: SecondItemEdge[];
}

/*
 * A connection to a list of items.

 */
export interface SecondItemConnectionPromise
  extends Promise<SecondItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SecondItemEdge>>() => T;
  aggregate: <T = AggregateSecondItemPromise>() => T;
}

/*
 * A connection to a list of items.

 */
export interface SecondItemConnectionSubscription
  extends Promise<AsyncIterator<SecondItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SecondItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSecondItemSubscription>() => T;
}

/*
 * An edge in a connection.

 */
export interface SecondItemEdge {
  node: SecondItem;
  cursor: String;
}

/*
 * An edge in a connection.

 */
export interface SecondItemEdgePromise
  extends Promise<SecondItemEdge>,
    Fragmentable {
  node: <T = SecondItemPromise>() => T;
  cursor: () => Promise<String>;
}

/*
 * An edge in a connection.

 */
export interface SecondItemEdgeSubscription
  extends Promise<AsyncIterator<SecondItemEdge>>,
    Fragmentable {
  node: <T = SecondItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSecondItem {
  count: Int;
}

export interface AggregateSecondItemPromise
  extends Promise<AggregateSecondItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSecondItemSubscription
  extends Promise<AsyncIterator<AggregateSecondItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  field: String;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  field: () => Promise<String>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  field: () => Promise<AsyncIterator<String>>;
}

export interface SecondItemSubscriptionPayload {
  mutation: MutationType;
  node: SecondItem;
  updatedFields: String[];
  previousValues: SecondItemPreviousValues;
}

export interface SecondItemSubscriptionPayloadPromise
  extends Promise<SecondItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SecondItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SecondItemPreviousValuesPromise>() => T;
}

export interface SecondItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SecondItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SecondItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SecondItemPreviousValuesSubscription>() => T;
}

export interface SecondItemPreviousValues {
  id: ID_Output;
  secondField?: String;
}

export interface SecondItemPreviousValuesPromise
  extends Promise<SecondItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  secondField: () => Promise<String>;
}

export interface SecondItemPreviousValuesSubscription
  extends Promise<AsyncIterator<SecondItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  secondField: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
*/
export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Item",
    embedded: false
  },
  {
    name: "SecondItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
